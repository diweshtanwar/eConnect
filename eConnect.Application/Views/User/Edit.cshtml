@model eConnect.Model.Userinput

@{ ViewBag.Title = "Edit User";
    Layout = "~/Views/Shared/_LayoutMain.cshtml";

    //string PassportSizePhotoPath = @System.Web.Configuration.WebConfigurationManager.AppSettings["UserFilePath"] + Model.Id + "\\UserPassportSizePhoto\\" + Model.PassportSizePic;
    string PassportSizePhotoPath = Model.UserType+"/"+Model.Id + "/UserPassportSizePhoto/"+Model.PassportSizePic;
    }



@using (Html.BeginForm("Edit", "User", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Id)
    @Html.HiddenFor(model => model.UserId)

    <section class="section">
        <div class="card">
            <div class="card-body">
                <h6 class="text-primary mb-3"> Personal Details</h6>
                <input type="hidden" id="RoleName" name="RoleName" value="@Model.RoleName" />


                <div class="row">
                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "required-field" })
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.FatherName, htmlAttributes: new { @class = "required-field" })
                            @Html.EditorFor(model => model.FatherName, new { htmlAttributes = new { @class = "form-control" } })

                            @Html.ValidationMessageFor(model => model.FatherName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.MotherName, htmlAttributes: new { @class = "required-field" })
                            @Html.EditorFor(model => model.MotherName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.MotherName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.EmailId, htmlAttributes: new { @class = "required-field" })
                            @Html.EditorFor(model => model.EmailId, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.EmailId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        @Html.LabelFor(model => model.Country, htmlAttributes: new { @class = "required-field" })

                        @Html.DropDownList("Country", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })


                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "required-field" })

                            @Html.DropDownList("State", null, htmlAttributes: new { @class = "form-control", @onchange = "return bindCity();" })
                            @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "required-field" })

                            @Html.DropDownList("City", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.MobileNumber, htmlAttributes: new { @class = "required-field" })
                            @Html.EditorFor(model => model.MobileNumber, new { htmlAttributes = new { @class = "form-control", @maxlength = "10" } })
                            @Html.ValidationMessageFor(model => model.MobileNumber, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "required-field" })
                            @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.EmergencyContactNumber, htmlAttributes: new { @class = "required-field" })
                            @Html.EditorFor(model => model.EmergencyContactNumber, new { htmlAttributes = new { @class = "form-control", @maxlength = "10" } })
                            @Html.ValidationMessageFor(model => model.EmergencyContactNumber, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Department, htmlAttributes: new { @class = "required-field" })
                            @Html.DropDownList("Department", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Department, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Designation, htmlAttributes: new { @class = "required-field" })
                            @Html.DropDownList("Designation", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Designation, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.UserType, htmlAttributes: new { @class = "required-field" })
                            @Html.DropDownList("UserType", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.UserType, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Qualification, htmlAttributes: new { @class = "required-field" })
                            @Html.EditorFor(model => model.Qualification, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Qualification, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>


                <h6 class="text-primary mb-3"> Upload</h6>
                <div class="row">
                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.PassportSizePhoto, htmlAttributes: new { @class = "required-field" })
                            <input type="file" id="PassportSizePhoto" name="PassportSizePhoto" class="btn btn-outline-primary btn-block fileup-btn" onchange="show(this)" />
                            @*@Html.ValidationMessageFor(model => model.PassportSizePhoto, "", new { @class = "text-danger" })*@

                            @if (!string.IsNullOrEmpty(Model.PassportSizePic))
                            {
                                @*<a href="javascript:PreviewImage('@Model.PassportSizePic');">PreviewImage</a>*@
                                <a href="~/ImageViewer/Getimage/?Type=User+&File=+@PassportSizePhotoPath" target="_blank">PreviewImage</a>
                            }
                            else
                            {
                                <span style="color:red;">No image uploaded.</span>}
                        </div>
                    </div>

                </div>
                <div class="my-4 text-right">
                    <button class="btn btn-primary px-4" type="submit">Update</button>
                    @if (Session["UserTypeId"].ToString() == "1" || Session["UserTypeId"].ToString() == "2")
                    {
                        @Html.ActionLink("Cancel", "Index", "Menu", new { @class = "btn btn-dark px-4 mr-2" })
                    }
                </div>
                @*<div class="text-left">
                        @Html.ActionLink("Cancel", "Index")
                    </div>*@
            </div>
        </div>
    </section>
}

<script>
    $(document).ready(function () {
       

        $("#UserType").on("change", function () {

            $("#RoleName").val($(this).find("option:selected").text());
        });
    });
    debugger;
    /*  $(document).ready(function () {*/

    function bindCity() {
        var sid = $("#State").val();
        $("#City").empty();

        $.ajax({
            url: '@Url.Action("BindCity", "User")',
            data: { state_id: sid },
            type: 'GET',
            success: function (data)
            {
                var v = "<option>---Select---</option>";
                $.each(data, function (i, v1) {
                    v += "<option value=" + v1.Value + ">" + v1.Text + "</option>";
                });
                $("#City").html(v);
            }
        });
    }
    debugger;
    function PreviewImage(url) {
        var win = window.open();
        win.document.write("<iframe width='100%' height='100%' scrolling='no' src='" + url + "'></iframe>");
    }
    /*    });*/
</script>
